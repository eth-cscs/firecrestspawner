reloader:
  reloader:
    # Set to true to enable the reloader for automatically restarting pods on ConfigMap/Secret changes.
    enabled: false

    # If true, the reloader will watch ConfigMaps and Secrets in all namespaces, not just its own.
    watchGlobally: false

    # Set to true if using Argo Rollouts for managing deployments, which may require specific handling.
    isArgoRollouts: true

    serviceAccount:
      # Set to true to create a new service account for the reloader. If false, it will use an existing one.
      create: false

    # Ensures the reloader container's filesystem is mounted as read-only to enhance security.
    securityContext:
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault

f7t4jhub:
  setup:
    # URL for the Firecrest service (replace with your own Firecrest URL)
    firecrestUrl: "https://firecrest.example.com"

    # URL to obtain an auth token from your identity provider (replace with your own token URL)
    authTokenUrl: "https://auth.example.com/auth/realms/yourrealm/protocol/openid-connect/token"

  proxy:
    # Image for the configurable HTTP proxy
    image: 'quay.io/jupyterhub/configurable-http-proxy:4.6.1'

  hub:
    # Image for the JupyterHub application (replace with your own JupyterHub image)
    image: 'ghcr.io/eth-cscs/f7t4jhub:4.1.5'

    # Set log level to logging.DEBUG
    debug: false

  reloader:
    # Enable or disable reloader integration
    enabled: false

  vault:
    # URL for the Vault service (replace with your own Vault URL)
    url: 'https://vault.example.com'

    # Secret engine used in Vault (replace with your own secret engine)
    secretEngine: 'secret-engine'

    # Role ID for accessing Vault secrets (replace with your own role ID)
    roleId: 'role-id'

    # keycloack credentials
    keycloak:
      # Enable or disable Vault integration
      enabled: false

      # Secret path in Vault (replace with your own secret path)
      secretPath: 'secret/path/keycloack'

    # container registry credentials
    containerRegistry:
      # Enable or disable Vault integration
      enabled: false

      # Secret path in Vault (replace with your own secret path)
      secretPath: 'secret/path/containers'

    # proxy authentication token
    configProxyAuthToken:
      # Enable or disable Vault integration
      enabled: false

      # Secret path in Vault (replace with your own secret path)
      secretPath: 'secret/path/proxy'

  # service account for polling jobs
  serviceAccount:
    # Enable or disable service account for polling jobs
    enabled: true

    # URL to obtain an auth token from your identity provider (replace with the SA's token URL)
    authTokenUrl: 'https://auth.cscs.ch/auth/realms/firecrest-clients/protocol/openid-connect/token'

  metricbeat:
    # Enable or disable annotations for metric beat monitoring
    enabled: false

    # Allow or deny access to /hub/metrics
    deny_metrics_endpoint: false

  network:
    # Ports configuration for the application
    appPort: 8000
    apiPort: 8001
    externalPort: 8081

  config:
    # Common name for the JupyterHub instance (replace with your own domain)
    commonName: 'jupyterhub.example.com'

    # Admin users for the JupyterHub instance (replace with your own admin users)
    adminUsers: "{'adminuser'}"

    # Default URL for the hub
    hubDefaultUrl: '/hub/home'

    auth:
      # OAuth callback URL (replace with your own callback URL)
      oauthCallbackUrl: "https://jupyterhub.example.com/hub/oauth_callback"

      # Authorization URL for your identity provider (replace with your own authorize URL)
      authorizeUrl: "https://auth.example.com/auth/realms/yourrealm/protocol/openid-connect/auth"

      # Token URL for your identity provider (replace with your own token URL)
      tokenUrl: "https://auth.example.com/auth/realms/yourrealm/protocol/openid-connect/token"

      # User data URL for your identity provider (replace with your own user info URL)
      userDataUrl: "https://auth.example.com/auth/realms/yourrealm/protocol/openid-connect/userinfo"

      # Login service URL (replace with your own login service URL)
      loginService: "https://auth.example.com"

      # Key for the username field in the user data response
      userNameKey: "preferred_username"

      # Additional parameters for user data request (customize as needed)
      userDataParams: "{'state': 'state'}"

      # Scopes for the authentication request (customize as needed)
      scope: "['openid', 'profile', 'customscope']"

    spawner:
      # Host for the spawner (replace with your own host)
      host: 'dom'

      # Port for the single-user server. Set to 0 to use random port
      port: 57001

      # Node name template (replace with your own node name template)
      nodeNameTemplate: '{}.example.com'

      # Job name for the spawner (customize as needed)
      jobName: 'spawner-jupyterhub'

      # Partition for the job scheduler (customize as needed)
      partition: 'slurm_partition'

      # Constraint for the job scheduler (customize as needed)
      constraint: 'slurm_constraint'

      # Command to run srun (customize as needed)
      srun: ''

      # Command to start the JupyterHub single-user server (customize as needed)
      cmd: 'firecrestspawner-singleuser jupyterhub-singleuser'

      # Pre-launch commands (customize as needed)
      prelaunchCmds: ''

      # Virtual environment setup (customize as needed)
      vclusterEnv: '. /path/to/venv/bin/activate'

      # Custom state get host function (customize as needed)
      customStateGetHost: None

      # Literal python code to add at the end of jupyterhub's configuration
      optionsForm: |

    # Literal python code to add at the end of jupyterhub's configuration
    extraConfig: |
      # ...
